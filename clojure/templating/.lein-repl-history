exit
(use 'templating.core)
(-main ("lsjlajls"))
exit
(use 'templating.core)
(use 'templating.conversion)
(templating.conversion)
(convert "aljls")
exit
(use templating.conversion)
(use 'templating.conversion)
(use 'templating.core)
(conversion/file_exists "/home/soma/test")
(templating.conversion/file_exists "/home/soma/test")
(use 'templating.core)
(use 'templating.conversion)
ext
exit
(use 'templating.conversion)
exit
(contains? (for [file (file-seq (clojure.java.io/file ("/home/soma")))] (.getName file)) "test)
(contains? (for [file (file-seq (clojure.java.io/file ("/home/soma")))] (.getName file)) "test")
(for [file (file-seq (clojure.java.io/file ("/home/soma")))] (.getName file)
)
(for [file (file-seq (clojure.java.io/file ("/home/soma")))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/soma"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts/"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file))
(contains? (for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file)) "test")
(contains? '(for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file)) "test")
(contains? (set (for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file))) "test")
exit
(:require '[templating.fileops])
(:require '[templating.fileops :as fileops])
(fileops/file-exists? "/home/soma")
(:require '[templating.fileops :as fileops])
(fileops/file-exists? "/home/soma")
(:require [templating.fileops :as fileops])
(:require '[templating.fileops :as 'fileops])
(fileops/file-exists? "/home/soma")
(:require '[templating.fileops])
(templating.fileops/file-exists? "/home/soma")
(set (for [file (file-seq (clojure.java.io/file "/home"))] (.getName file)))
(set (for [file (file-seq "/home")] (.listFiles file)))
(.listFiles (clojure.java.io/file "/home")
(.listFiles (clojure.java.io/file "/home"))
(contains? (.listFiles (clojure.java.io/file "/home")) "soma")
(.listFiles (clojure.java.io/file "/home"))
(.getNames (clojure.java.io/file "/home"))
(.listFiles (clojure.java.io/file "/home"))
(set (.listFiles (clojure.java.io/file "/home")))
(file-seq (.listFiles (clojure.java.io/file "/home")))
(set (.listFiles (clojure.java.io/file "/home")))
(contains? (set (.listFiles (clojure.java.io/file "/home"))) "soma")
(contains? (set (.listFiles (clojure.java.io/file "/home"))) "/home/soma")
(set (.listFiles (clojure.java.io/file "/home")))
(seq [file (set (.listFiles (clojure.java.io/file "/home")))] (.getName file))
(seq [file (set (.listFiles (clojure.java.io/file "/home")))] (.getNames file))
(seq [file (set (.listFiles (clojure.java.io/file "/home")))] (.getName file))
(doseq [file (set (.listFiles (clojure.java.io/file "/home")))] (.getName file))
(for [file (set (.listFiles (clojure.java.io/file "/home")))] (.getName file))
(for [file (.listFiles (clojure.java.io/file "/home"))] (.getName file))
(.split "/home/soma" "/")
(first (.split "/home/soma" "/"))
'(.split "/home/soma" "/"))
'(.split "/home/soma" "/")
('(.split "/home/soma" "/"))
(seq [x (.split "/home/soma" "/")] (println x))
(doseq [x (.split "/home/soma" "/")] (println x))
(clojure.string/join "/" (.split "/home/soma" "/"))
(clojure.string/join "/" (remove (last (.split "home/soma" "/")) (.split "/home/soma" "/")))
(clojure.string/join "/" (remove (last (.split "/home/soma" "/")) (.split "/home/soma" "/")))
(fn split [] (.split "/home/soma" "/"))
(clojure.string/join "/" (remove (last (split) (split)))
(clojure.string/join "/" (remove (last (split) (split))))
(fn test [] (.split "/home/soma" "/"))
(clojure.string/join "/" (remove (last (test) (test))))
(fn x [] (.split "/home/soma" "/"))
(clojure.string/join "/" (remove (last x) x)))
(clojure.string/join "/" (remove (last x) x))
(clojure.string/join "/" (remove (last 'x) x)))
(clojure.string/join "/" (remove (last 'x) 'x))
(clojure.string/join "/" (remove (last (x)) (x)))
(def x (.split "/home/soma" "/"))
(clojure.string/join "/" (remove (last (x)) (x)))
(clojure.string/join "/" (remove (last x) x))
(clojure.string/join "/" (remove (last 'templating.core/x) 'templating.core/x))
(clojure.string/join "/" (remove (last templating.core/x) templating.core/x))
(clojure.string/join "/" (remove (last x) x))
(clojure.string/join "/" (remove (last ["" "home" "soma" nil]) ["" "home" "soma" nil))
(clojure.string/join "/" (remove (last ["" "home" "soma" nil]) ["" "home" "soma" nil]))
(clojure.string/join "/" (remove (last ["" "home" "soma" nil]) ["" "home" "soma" nil])))
(clojure.string/join "/" (remove (last ["" "home" "soma" nil]) ["" "home" "soma" nil]))))
(clojure.string/join "/" (remove (last ["" "home" "soma" nil]) ["" "h
(clojure.string/join "/" (remove (last ["" "home" "soma" nil]) ["" "home" "soma" nil]))
(clojure.string/join "/" (remove (last ["" "home" "soma"]) ["" "home" "soma"]))
(clojure.string/join "/" (remove "soma" ["" "home" "soma"]))
(clojure.string/join "/" ["" "home"])
(contains? (set (for [file (.listFiles (clojure.java.io/file (clojure.string/join "/" ["" "home"])))] (.getName file))) "soma")
(:require [templating.fileops])
(:require '[templating.fileops])
(templatin.fileops/file-exists? "/home/soma")
(templating.fileops/file-exists? "/home/soma")
(templating.fileops/file-exists? "/home/)
(templating.fileops/file-exists? "/home/")
(templating.fileops/file-exists? "/home")
(templating.fileops/file-exists? "/")
(contains? (set (for [file (.listFiles (clojure.java.io/file (clojure.string/join "/" ["" "home"])))] (.getName file))) "soma")
(templating.fileops/split-path "/home/soma")
(for [x (templating.fileops/split-path "/home/soma")] (println x))
(println (last (templating.fileops/split-path "/home/soma")))
(println (templating.fileops/filename "/home/soma")))
(println (templating.fileops/filenae "/home/soma")))
(println (templating.fileops/filenae "/home/soma"))
(println (templating.fileops/filename "/home/soma"))
(println (clojure.string/join "/" (templating.fileops/filename "/home/soma")))
(println (templating.fileops/path "/home/soma"))
exit
(println (templating.fileops/path "/home/soma"))
(println (templating.fileops/filename "/home/soma"))
(println (remove (templating.fileops/filename "/home/soma") (templating.fileops/split-path "/home/soma")))
remove (templating.fileops/filename "/home/soma") (templating.fileops/split-path "/home/soma")))
(println (templating.fileops/filename "/home/soma"))
(remove (templating.fileops/filename "/home/soma") (templating.fileops/split-path "/home/soma")))
(remove (templating.fileops/filename "/home/soma") (templating.fileops/split-path "/home/soma"))
(remove "soma" (templating.fileops/split-path "/home/soma"))
(remove (templating.fileops/filename "/home/soma") (vec (templating.fileops/split-path "/home/soma")))
(remove (templating.fileops/filename "/home/soma") (templating.fileops/split-path "/home/soma")))
(remove (templating.fileops/filename "/home/soma") (templating.fileops/split-path "/home/soma"))
(remove "soma" (templating.fileops/split-path "/home/soma")))
(remove "soma" (templating.fileops/split-path "/home/soma")
(remove "soma" (templating.fileops/split-path "/home/soma"))
(remove (templating.fileops/split-path "/home/soma") "soma"))
(remove (templating.fileops/split-path "/home/soma") "soma")
(remove "soma" ["" "home" "soma"]
)
(filter "soma" ["" "home" "soma"]
)
(remove ["" "home" "soma"] "soma")
