exit
(use 'templating.core)
(-main ("lsjlajls"))
exit
(use 'templating.core)
(use 'templating.conversion)
(templating.conversion)
(convert "aljls")
exit
(use templating.conversion)
(use 'templating.conversion)
(use 'templating.core)
(conversion/file_exists "/home/soma/test")
(templating.conversion/file_exists "/home/soma/test")
(use 'templating.core)
(use 'templating.conversion)
ext
exit
(use 'templating.conversion)
exit
(contains? (for [file (file-seq (clojure.java.io/file ("/home/soma")))] (.getName file)) "test)
(contains? (for [file (file-seq (clojure.java.io/file ("/home/soma")))] (.getName file)) "test")
(for [file (file-seq (clojure.java.io/file ("/home/soma")))] (.getName file)
)
(for [file (file-seq (clojure.java.io/file ("/home/soma")))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/soma"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts/"))] (.getName file))
(for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file))
(contains? (for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file)) "test")
(contains? '(for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file)) "test")
(contains? (set (for [file (file-seq (clojure.java.io/file "/home/soma/dotfiles/scripts"))] (.getName file))) "test")
exit
